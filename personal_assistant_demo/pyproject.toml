[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 64"]

[project]
name = "personal_assistant_demo"
version = "1.0.0"
dependencies = [
    "nvidia-nat[all]>=1.2.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "google-api-python-client>=2.100.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.0.0",
    "filelock>=3.13",
    "jsonschema>=4.19.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "flask>=3.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "types-requests>=2.31.0",
    "types-jsonschema>=4.19.0"
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0"
]

requires-python = ">=3.11,<3.13"
description = "Production-grade Personal Assistant with Planner-Executor Architecture"
keywords = ["ai", "agents", "personal-assistant", "production", "circuit-breaker", "telemetry"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[project.scripts]
pa-demo = "personal_assistant.demos.showcase:main"
pa-web = "personal_assistant.demos.web.run_web:main"

[project.entry-points.'nat.components']
personal_assistant = "personal_assistant.register"

# Tool configuration
[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "ICN", "T20", "Q"]
ignore = ["E501"]  # Line too long (handled by formatter)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
check_untyped_defs = true

# Coverage
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/legacy/*", "*/demos/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError"
]
