# SPDX-FileCopyrightText: Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# Enhanced ReAct Agent Configuration - Fixed for Conversational Follow-ups
# This configuration fixes the ReAct format issues with improved prompt engineering

general:
  use_uvloop: true
  front_end:
    _type: fastapi

functions:
  # Task Management Tools
  add_task:
    _type: personal_assistant/add_task
  list_tasks:
    _type: personal_assistant/list_tasks
  complete_task:
    _type: personal_assistant/complete_task
  delete_task:
    _type: personal_assistant/delete_task
  list_tasks_for_client:
    _type: personal_assistant/list_tasks_for_client
  add_client_task:
    _type: personal_assistant/add_client_task

  # Calculator Tools
  add_numbers:
    _type: personal_assistant/add_numbers
  subtract_numbers:
    _type: personal_assistant/subtract_numbers
  multiply_numbers:
    _type: personal_assistant/multiply_numbers
  divide_numbers:
    _type: personal_assistant/divide_numbers
  calculate_percentage:
    _type: personal_assistant/calculate_percentage

  # Date/Time Tools
  current_time:
    _type: personal_assistant/current_time
  current_date:
    _type: personal_assistant/current_date

  # Enterprise Solutions Architect Tools
  schedule_meeting:
    _type: personal_assistant/schedule_meeting
  list_meetings:
    _type: personal_assistant/list_meetings
  cancel_meeting:
    _type: personal_assistant/cancel_meeting
  add_client:
    _type: personal_assistant/add_client
  list_clients:
    _type: personal_assistant/list_clients
  add_client_note:
    _type: personal_assistant/add_client_note
  get_client_details:
    _type: personal_assistant/get_client_details
  find_client_by_name:
    _type: personal_assistant/find_client_by_name

llms:
  ollama_llm:
    _type: openai
    api_key: "ollama"
    base_url: "http://localhost:11434/v1"
    model_name: "llama3.1:8b-instruct"
    temperature: 0.1   # Lower temperature for more consistent formatting
    top_p: 0.7         # Constrain sampling to reduce rambling
    max_tokens: 180    # Balanced: enough context, prevents overthinking
    timeout: 20        # Ensure second-turn completions don't hang
    # Using OpenAI-compatible parameters for Ollama
    stop: ["\nQuestion:", "\nAnswer:", "\nThought:"]  # Hard stops for Q&A drift

workflow:
  _type: react_agent
  tool_names: [
    add_task, list_tasks, complete_task, delete_task, list_tasks_for_client, add_client_task,
    add_numbers, subtract_numbers, multiply_numbers, divide_numbers, calculate_percentage,
    current_time, current_date,
    schedule_meeting, list_meetings, cancel_meeting,
    add_client, list_clients, add_client_note, get_client_details, find_client_by_name
  ]
  llm_name: ollama_llm
  verbose: true
  
  # Right-sized settings for demos
  retry_agent_response_parsing_errors: true
  parse_agent_response_max_retries: 3         # Right-sized for demos
  tool_call_max_retries: 1                    # Single tool retry to avoid loops
  max_tool_calls: 6                           # Right-sized for demos
  recursion_limit: 20                         # Right-sized for demos
  pass_tool_call_errors_to_agent: false      # Don't pass errors to avoid confusion
  use_tool_schema: true                       # Include detailed tool descriptions
  max_history: 20                             # Longer history for better context understanding
  
  # Anti-drift ReAct prompt - removes Q&A triggers
  system_prompt: |
    You are a tool-calling assistant. You have access to these tools:

    {tools}

    STRICT FORMAT - Follow this pattern exactly:

    User Request: [the user's request]
    Thought: [what you need to do next]
    Action: [tool name from {tool_names}]
    Action Input: [JSON input for the tool]
    Observation: [tool result will appear here]
    ... (repeat Thought/Action/Action Input/Observation as needed)
    Thought: [when all steps are complete]
    Final Answer: [complete response to user]

    IMPORTANT: 
    - For multi-step requests (e.g., "do X, then Y, then Z"), complete EACH step in order
    - After each tool call, immediately move to the NEXT requested step  
    - Only provide "Final Answer" after ALL requested steps are complete
    - Never generate internal questions or get distracted from the original request
    - Use conversation history to understand follow-up questions like "who?" or "which ones?"
  
  # Keep it simple to avoid infinite loops
  additional_instructions: |
    STOPPING RULES (CRITICAL):
    1. Complete all requested steps, then provide a single Final Answer immediately
    2. Never output both an Action and a Final Answer in the same turn
    3. If a required parameter (e.g., meeting_id) is unknown, DO NOT invent or use placeholders (e.g., 12345)
       - First call the appropriate tool to obtain it (e.g., list_meetings) or ask one concise question
       - If unknown, set Action Input to {{}}
    4. After completing all requested steps, output exactly one Final Answer. Do not repeat or restate Final Answer
    5. Action Input format: {{}} for empty, {{"key": "value"}} for parameters
    6. ALWAYS end with "Final Answer:" - never get stuck in reasoning loops

    ACTION INPUT VALIDATION (IMPORTANT):
    - Each Action must include exactly ONE JSON object in Action Input (no arrays, no multiple objects concatenated)
    - For cancel_meeting, Action Input MUST be of the form: {{"meeting_id": <integer>, "reason": "<string>"}}
    - If the user asks to cancel multiple meetings (e.g., IDs 9 and 10), perform SEPARATE tool calls:
      Action: cancel_meeting -> Action Input: {{"meeting_id": 9, "reason": ""}}
      Observation: ...
      Action: cancel_meeting -> Action Input: {{"meeting_id": 10, "reason": ""}}
    - Never place two JSON objects into a single Action Input string
    
    FORBIDDEN: Never output "Question:", "Answer:", or internal analysis.
    STAY FOCUSED: Always remember the original user request. Do not get distracted by data you see.
    
    MULTI-STEP EXAMPLE:
    User Request: Add task 'Demo prep', then list all tasks, then calculate 10% of 500
    
    Thought: Step 1 - Adding task 'Demo prep'
    Action: add_task
    Action Input: {{"description": "Demo prep"}}
    Observation: Added task abc123: 'Demo prep'
    
    Thought: Step 2 - Listing all tasks
    Action: list_tasks  
    Action Input: {{}}
    Observation: Found 8 tasks: [task details...]
    
    Thought: Step 3 - Calculating 10% of 500
    Action: calculate_percentage
    Action Input: {{"text": "10% of 500"}}
    Observation: 10% of 500 = 50
    
    Thought: All 3 steps complete
    Final Answer: Added 'Demo prep' task, listed 8 tasks, and calculated 10% of 500 = 50.
